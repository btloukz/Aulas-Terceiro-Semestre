import {input, number, select} from '@inquirer/prompts'
import api from './CrudAPI.js'

async function menu() {
    const answer = await select({
        message: 'Opção:',
        choices: [
        {
            name: 'Criar novo pedido',
            value: 'novoPedido'
        },

        {
            name: 'Adicionar produtos ao pedido',
            value: 'adicionarPedido'
        },
        {
            name: 'Listar todos os pedidos',
            value: 'listarPedidos'
        },
        {
            name: 'Listar todos os produtos',
            value: 'listarProdutos'
        },
        {
            name: 'Buscar produtos de um determinado pedido',
            value: 'buscarProdutoPorPedido'
        },
        {
            name: 'Listar todos os pedidos com valor total',
            value: 'listarPedidosTotal'
        },
        {
            name: 'Verificar quantidade de produtos',
            value: 'qtdProdutos'
        },
        {
            name: 'Buscar pedido por nome',
            value: 'buscarPedidoNome'
        },
        {
            name: 'Relatório Geral',
            value: 'relatorio'
        },
        {
            name: 'Buscar Valor Mínimo',
            value: 'valorMinimo'
        },
        {
            name: 'Quantidade maior',
            value: 'qtdMaior'
        },
        {
            name: 'Somar Produtos Cliente',
            value: 'somarCliente'
        },
        {
            name: 'Sair',
            value: 'sair'
        }

        ]
    })

    switch(answer) {
        case 'novoPedido':
            await novoPedido()
            break;
        case 'adicionarPedido': 
            await adicionar_pedido()
            break;
        case 'listarPedidos':
            await listarPedidos()
            break;
        case 'listarProdutos':
            await listarProdutos()
            break;
        case 'buscarProdutoPorPedido': 
            await buscarProdutoPorPedido()
            break;
        case 'listarPedidosTotal':
            await listarPedidosTotal()
            break;
        case 'qtdProdutos':
            await qtdProdutos()
            break;
        case 'buscarPedidoNome':
            await buscarPedidoNome()
            break;
        case 'relatorio':
            await relatorio()
            break;
        case 'valorMinimo':
            await valorMinimo()
            break;
        case 'qtdMaior':
            await qtdMaior()
            break;
        case 'somarCliente':
            await somarCliente()
            break;
        case 'sair': 
            return;
    }
    menu()
}

async function novoPedido(){
    let cliente = await input({message: "Digite o nome do novo cliente:"})
    let novo_registro = await api.cadastrarPedido(cliente)
    console.log(`Seja bem vindo! Suas informações: ID - ${novo_registro.id}, NOME - ${novo_registro.cliente}!`)
}

async function adicionar_pedido(){
    let id_pedido = await number({message: "Digite o ID do pedido:"})
    let confere = await api.listarPedidos(id_pedido)
    if(!confere){
        console.error("Registro inexistente/não encontrado!")
    } else {
        let produto = await input({message: "Informe o produto:"})
        let valor = parseFloat(await input({message: "Informe o valor em R$:"}))
        if(produto =="" || valor == ""){
            console.error("Você deixou espaços em branco! Encerrando...")
        } else {
            let novo = {pedido_id: id_pedido, produto, valor}
            let criar = await api.cadastrarPedidoProduto(novo)
            console.log(`Cadastro realizado com sucesso! Nova ID: ${criar.id}`)
        }
    }
}

async function listarPedidos(){
    let listar = await api.listarPedidos()
    listar.forEach((elemento)=>{
        console.log(`${elemento.id} - ${elemento.cliente}`)
    })
}

async function listarProdutos(){
    let listar = await api.listarPedidoProdutos()
    listar.forEach((elemento)=>{
        console.log(`${elemento.pedido_id} - ${elemento.id} - ${elemento.produto} - R$${elemento.valor}`)
        })     
}

async function buscarProdutoPorPedido(){
    let valor = await number({message: "Informe o ID do pedido que deseja listar:"})
    let filtrar = await api.lerPedidoPorId(valor)
    if(!filtrar){
        console.error("ID inexistente/não encontrado")
    } else {
        let listar = await api.listarPedidoProdutos()
        let cliente = await api.listarPedidos()
        cliente.find((item)=>{
            if(item.id === valor){
                console.log(`Cliente: ${item.cliente}`)
                listar.find((elemento)=>{
                    if(elemento.pedido_id === valor){
                        console.log(`${elemento.id} - ${elemento.produto} - R$${elemento.valor}`)
                    }
            })}
        })
    }
}

async function listarPedidosTotal(){
    let pedido = await api.listarPedidos()
    let listar = await api.listarPedidoProdutos()
    pedido.forEach((item)=>{
        let filtro = listar.filter((elemento)=>{
            return elemento.pedido_id === item.id
        })
        let soma = filtro.reduce((item1, item2)=>{
            item1 += item2.valor
            return item1
        }, 0)
        console.log(`${item.id} - ${item.cliente} - R$${soma.toFixed(2)}`)
    })
}    

async function qtdProdutos(){
    let valor = await number({message: "Informe o ID para verificação: "})
    let pedido = await api.lerPedidoPorId(valor)
    if(pedido){
        let cliente = await api.listarPedidoProdutos()
        let valida = cliente.filter((item)=>item.pedido_id === valor)
        if(valida.length === 0){
            console.log(`O pedido ${valor} não possui produtos.`)
        } else {
            console.log(`O pedido ${valor} tem ${valida.length} produtos.`)
        }
    }
}

async function buscarPedidoNome(){
    let nome = await input ({message: "Informe o nome do produto: "})
    let verifica = await api.listarPedidoProdutos()
    let valida = verifica.filter((item)=>{
        if(item.produto.toLowerCase() === nome.toLowerCase()){
            console.log(`ID: ${item.pedido_id} - ID do Produto: ${item.id} - Produto: ${item.produto}`)
            return true
        } 
    })
    if(valida.length === 0){
        console.log(`O Produto ${nome} não consta.`)
    }
}

async function relatorio(){
     let pedidos = await api.listarPedidos()
     let produtos = await api.listarPedidoProdutos()
     pedidos.forEach((pedido)=>{
        let valida = produtos.filter(item=>item.pedido_id === pedido.id)
        console.log(`${pedido.id} - ${pedido.cliente} - ${valida.length} produtos.`)
     })
}

async function valorMinimo(){
    let preco = await number({message: "Informe o valor em R$: "})
    let produto = await api.listarPedidoProdutos()
    let filtra = produto.filter((item)=>{
        if(item.valor >= preco){
            console.log(`ID do pedido: ${item.pedido_id} - Produto: ${item.produto} - Valor: R$${item.valor}`)
            return true
        }
    })
    if(filtra.length === 0){
        console.log("Nenhum produto com valor maior.")
    }
}

async function qtdMaior(){
    let qtd = await number({message: "Diga um determinado número de produtos: "})
    let pedidos = await api.listarPedidos()
    let produtos = await api.listarPedidoProdutos()
    let encontrados = []
    pedidos.forEach((pedido)=>{
        let itens = produtos.filter((item)=>item.pedido_id === pedido.id)
        if(itens.length > qtd){
            console.log(`Pedido ${pedido.id} - Cliente: ${pedido.cliente} - ${itens.length} produtos`)
            encontrados.push(pedido)
        }
    })
    if(encontrados.length === 0){
        console.log("Nenhum pedido a mais")
    }
}

async function somarCliente() {
    let nome = await input({message: "Informe o nome do cliente: "})
    let pedidos = await api.listarPedidos()
    let produtos = await api.listarPedidoProdutos()
    pedidos.forEach((item)=>{
        if(item.cliente.toLowerCase().includes(nome.toLowerCase())){
            let filtra = produtos.filter(prod=>prod.pedido_id === item.id)
            let soma = filtra.reduce((a,b)=>a+b.valor, 0)
            console.log(`Cliente ${item.cliente} - Total - R$${soma.toFixed(2).replace(".", ",")}`)
        }
    })
}

await menu()
